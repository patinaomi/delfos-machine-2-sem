
using Microsoft.AspNetCore.Authentication.Cookies;
using Project.Infrastructure.Interfaces;
using Project.Application.Services;
using Project.Repositories;
using Project.Domain;
using MongoDB.Driver;
using Microsoft.Extensions.Options;
using Project.Services;
using Microsoft.OpenApi.Models;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllersWithViews();

// Configura√ß√£o do MongoDB
builder.Services.Configure<ConfigMongoDb>(builder.Configuration.GetSection("ConfigMongoDb"));

// Registra o cliente MongoDB como Transient, n√£o Signton como o professor ensinou.
builder.Services.AddTransient<IMongoClient>(sp =>   
{
    var settings = sp.GetRequiredService<IOptions<ConfigMongoDb>>().Value;
    return new MongoClient(settings.ConnectionString);
});

// Registrar os servi√ßos necess√°rios

//Usuario -- Cadastro
builder.Services.AddTransient<IUsuarioService, UsuarioService>();
builder.Services.AddTransient<IUsuarioRepository, UsuarioRepository>();

// Login
builder.Services.AddTransient<ILoginService, LoginService>();
builder.Services.AddTransient<ILoginRepository, LoginRepository>();

// Endereco
builder.Services.AddTransient<IEnderecoService, EnderecoService>();
builder.Services.AddTransient<IEnderecoRepository, EnderecoRepository>();

// Dias Preferencia
builder.Services.AddTransient<IDiasPreferenciaService, DiasPreferenciaService>();
builder.Services.AddTransient<IDiasPreferenciaRepository, DiasPreferenciaRepository>();

// Turno de preferencia
builder.Services.AddTransient<ITurnoService, TurnoService>();
builder.Services.AddTransient<ITurnoRepository, TurnoRepository>();

// Hor√°rios de preferencia
builder.Services.AddTransient<IHorariosService, HorariosService>();
builder.Services.AddTransient<IHorariosRepository, HorariosRepository>();

// Clinicas
builder.Services.AddTransient<IClinicaService, ClinicaService>();
builder.Services.AddTransient<IClinicaRepository, ClinicaRepository>();


// Configurar autentica√ß√£o com cookies
builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =>
    {
        options.LoginPath = "/Login/Logar";
    });

// Adicionando suporte a sess√µes
builder.Services.AddDistributedMemoryCache(); // Usar cache de mem√≥ria para sess√£o
builder.Services.AddSession(options =>
{
    options.IdleTimeout = TimeSpan.FromMinutes(30); // Define o tempo de inatividade
    options.Cookie.HttpOnly = true; // Garante que o cookie de sess√£o seja acess√≠vel apenas via HTTP
    options.Cookie.IsEssential = true; // Marca o cookie como essencial para a aplica√ß√£o
});



// Configura√ß√£o do Swagger/OpenAPI
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo 
    { 
        Title = "Delfos Machine", 
        Version = "v3",
        Description = @"Esta API foi desenvolvida para o projeto *Challenge OdontoPrev*.  

    Para mais detalhes, assista ao v√≠deo da aplica√ß√£o (https://link-do-video.com).  

    Sobre o Projeto
    O sistema sugere consultas para os clientes com base em tr√™s pilares principais:  
    1Ô∏è‚É£ Local, Data e Turno de prefer√™ncia do cliente üìç  
    2Ô∏è‚É£ Qualidade do atendimento (avaliada por pesquisas de satisfa√ß√£o) ‚≠ê  
    3Ô∏è‚É£ Baixo custo üí∞  
    4Ô∏è‚É£ Com ciclos de renova√ß√µes que deixam a sa√∫de do cliente em ciclos preventivos e sem perda de tempo e gastos desnecess√°rios
    5Ô∏è‚É£ N√£o √© necess√°rio acessar as agendas dos m√©dicos. Antes de sugerir uma consulta ao cliente, o modelo de IA analisa as cl√≠nicas que atendem √†s prefer√™ncias do paciente. Em seguida, a cl√≠nica recebe a oportunidade de aceitar ou recusar a solicita√ß√£o, com base na disponibilidade de hor√°rios dentro de sua rotina de atendimentos. 

    Essa abordagem visa proporcionar a melhor experi√™ncia ao usu√°rio, garantindo conveni√™ncia, qualidade e economia. Diferente dos modelos tradicionais dispon√≠veis no mercado, onde o pr√≥prio cliente precisa buscar cl√≠nicas e especialidades ‚Äî muitas vezes em situa√ß√µes de urg√™ncia ‚Äî, nosso sistema automatiza esse processo. A intelig√™ncia artificial identifica as op√ß√µes mais adequadas com base nas prefer√™ncias do cliente, otimizando o agendamento e reduzindo o tempo de espera. Isso n√£o apenas melhora a experi√™ncia do paciente, mas tamb√©m contribui para uma gest√£o mais eficiente das cl√≠nicas, permitindo um melhor aproveitamento da agenda e aumentando a taxa de ocupa√ß√£o dos profissionais de sa√∫de.",
        Contact = new OpenApiContact
        {
            Name = "Claudio Silva Bispo e Patricia Naomi",
            Email = "rm553472@fiap.com.br"
        },
        License = new OpenApiLicense
        {
            Name = "Delfos Machine Group - Segundo semestre",
            Url = new Uri("https://github.com/patinaomi/delfos-machine-2-sem.git")
        }
    });
    var xmlFile = $"{AppDomain.CurrentDomain.FriendlyName}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    c.IncludeXmlComments(xmlPath);
});

builder.WebHost.ConfigureKestrel(options =>
{
    //options.ListenAnyIP(3001);
    options.ListenLocalhost(3001);

});


var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

// Habilita o Swagger
app.UseSwagger();

// Habilita o Swagger UI
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "Delfos Machine API v3");
    c.RoutePrefix = "swagger"; 
});

app.UseSession();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Inicio}/{id?}");

app.Run();

